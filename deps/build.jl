using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(["libpath47julia"], :libpath47julia),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/PATHlib_jll.jl/releases/download/PATHlib-v4.7.3+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"3.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-linux-gnu-libgfortran3.tar.gz", "6645148f856eb9c338b59f2a65559e90a12434f5bf723f26600d83856cf38a28"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"4.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-linux-gnu-libgfortran4.tar.gz", "49be6cd6b7de48663ea7d9d2803155819ac3ee5e8944d0d43c7dcdfbfd01ec8c"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"5.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-linux-gnu-libgfortran5.tar.gz", "53df60673ebfba8e0b28d1ad229162e3b88bba33cd3760f5f86579035034dc4f"),
    Windows(:i686, compiler_abi=CompilerABI(libgfortran_version=v"3.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-w64-mingw32-libgfortran3.tar.gz", "5c1cc797e5fc7aa324aa1cebf9ec7bf0b7d93a7d1ad3bef1d5cb72a7ea38f52a"),
    Windows(:i686, compiler_abi=CompilerABI(libgfortran_version=v"4.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-w64-mingw32-libgfortran4.tar.gz", "1dd3970f02aca275460c8b47c2e5285846d5d67f49cd98f34b0f9ef860221a68"),
    Windows(:i686, compiler_abi=CompilerABI(libgfortran_version=v"5.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.i686-w64-mingw32-libgfortran5.tar.gz", "348b23bcc191f07442e235c2ca7e8f63a9353760bb88d0e420ccd3ac72dcf902"),
    MacOS(:x86_64) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-apple-darwin14.tar.gz", "88e6c76ecde10b6002f93df9099ee8637f472e4a29794150286a2b9f7c0398d4"),
    MacOS(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"3.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-apple-darwin14-libgfortran3.tar.gz", "caa8deafb516ebaf0c4a58c368c2511177a7014e83208ee77ab825bb6f52d74d"),
    MacOS(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"4.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-apple-darwin14-libgfortran4.tar.gz", "bdf362d18e4fdc1f6d6b307c90aa685c366f722158b1741c3833c9ba65951c9b"),
    MacOS(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"5.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-apple-darwin14-libgfortran5.tar.gz", "e1f3d3daac749c6c286bd7c94eb4073fc9292ba2cb84ccf8308a2becb676bd31"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"3.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-linux-gnu-libgfortran3.tar.gz", "50e0defc0f8261605c5b24ecc4c538e0526895e2bfb6a8c2a2612cce9d70073b"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"4.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-linux-gnu-libgfortran4.tar.gz", "3ec166089890804c9a0abfabe1dc45af92b5a3890df92e57b9972657cb94709b"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(libgfortran_version=v"5.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-linux-gnu-libgfortran5.tar.gz", "7828fd694e2ec45388898b690d0332ee902ede62e4ab5431eee993879884b0f7"),
    Windows(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"3.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-w64-mingw32-libgfortran3.tar.gz", "181915c6212782f80a2ac9ba0c07e86041a8af03f01829848c1bbe17f59f6e6f"),
    Windows(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"4.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-w64-mingw32-libgfortran4.tar.gz", "903d844d6c7cf50cce6bceaf9886b1ac8694d6d80f16c181b6275cc33986f43d"),
    Windows(:x86_64, compiler_abi=CompilerABI(libgfortran_version=v"5.0.0")) => ("$bin_prefix/PATHlib.v4.7.3.x86_64-w64-mingw32-libgfortran5.tar.gz", "a37032770e69907bbe0f9461e122acefef1c51f276d74d4c65cfdbb7d09173a1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
